/*
В каждой задаче нужно оставлять короткие комментарии, которые описывают смысл вашего кода - это обязательно

Задачи:

1) Создайте функцию, которая будет вычислять объем и площадь полной поверхности куба (тоже базовая математика, иногда используется в создании анимаций). 
Эта функция принимает в себя целое число со значением длины ребра куба. 
Ответ выведите в формате строки, который изображен в примерах.
Если в функцию попал неправильный аргумент или вычислить значения невозможно - вернуть строку "При вычислении произошла ошибка"

Примеры:

calculateVolumeAndArea(5)  => 'Объем куба: 125, площадь всей поверхности: 150'
calculateVolumeAndArea(15)  => 'Объем куба: 3375, площадь всей поверхности: 1350'
calculateVolumeAndArea(15.5)  => 'При вычислении произошла ошибка'
calculateVolumeAndArea('15')  => 'При вычислении произошла ошибка'
calculateVolumeAndArea(-15)  => 'При вычислении произошла ошибка'
*/

function calculateVolumeAndArea(edgeLength) {
  // Проверка на правильный тип и значение аргумента
  if (typeof edgeLength !== 'number'|| edgeLength <= 0 || !Number.isInteger(edgeLength)) {
    // Сообщение при непрохождении проверки
    console.log("При вычислении произошла ошибка");
  }
  else {
    // Вычисление объема и площади полной поверхности куба
    const volume = Math.pow(edgeLength, 3);
    const surfaceArea = 6 * Math.pow(edgeLength, 2);
    // Возвращение результата
    console.log("Объем куба:", volume, " Площадь всей поверхности:", surfaceArea);
  }
}



/*
2) Напишите функцию, которая будет определять номер купе по переданному ей номеру места. Функция принимает только целое число от 1 до 36.
Если переданный аргумент не число, отрицательное или дробное - возвращается сообщение: "Ошибка. Проверьте правильность введенного номера места"
Если число 0 или больше 36, то сообщение: "Таких мест в вагоне не существует"

Пример:
getCoupeNumber(33)  => 9
getCoupeNumber(7)  => 2
getCoupeNumber(300)  => "Таких мест в вагоне не существует"
getCoupeNumber(0)  => "Таких мест в вагоне не существует"
getCoupeNumber(7.7)  => "Ошибка. Проверьте правильность введенного номера места"
getCoupeNumber(-10)  => "Ошибка. Проверьте правильность введенного номера места"
getCoupeNumber('Hello')  => "Ошибка. Проверьте правильность введенного номера места"
*/

function getCoupeNumber(seatNumber) {
  // Проверка аргумента на численный тип, отрицательное и целое значение
  if (typeof seatNumber !== 'number' || seatNumber < 0 || !Number.isInteger(seatNumber)) {
    console.log("Ошибка. Проверьте правильность введенного номера места");
  }
  else {
    // Проверка на наличие числа в диапазоне от 1 до 36
    if(seatNumber == 0 || seatNumber > 36 ) {
      console.log("Таких мест в вагоне не существует")
    }
    else {
      // Вычисление номера купе и возвращение результата
      console.log(Math.floor(seatNumber / 4) + 1)
    }
  }
}



/*
3) Измените данный массив так, чтобы все числа были увеличены в 2 раза, а если попадается строка строка - то к ней было добавлено " - done".
Для определения типа данных используйте typeof();
Должно получиться: [ 10, 20, 'Shopping - done', 40, 'Homework - done' ]
*/

// Инициализация массива
let data = [5, 10, 'Shopping', 20, 'Homework'];

// Изменение аргумента в зависимости от его типа
for (let i = data.length - 1; i >= 0; i--) {
    if (typeof data[i] === 'number') {
      data[i] *= 2;
    } else if (typeof data[i] === 'string') {
      data[i] += ' - done';
    }
}

// Вывод результата
console.log(data)



/*
4) Разверните массив data наоборот при помощи цикла и запишите данные в массив result.
Должно получиться: [ 'Homework', 20, 'Shopping', 10, 5 ]
ВАЖНО: нельзя использовать функцию reverse у массива
*/

// Инициализируем массив значения которого будут в обратном порядке относительно массива data
let result = []

// Присваиваем массиву result значения массива data в обратном порядке
for (let i = data.length - 1; i >= 0; i--) {
  result[data.length - 1 - i] = data[i];
}

// Вывод результата
console.log(result)
// ЗАПУСКАТЬ СТРОГО ВМЕСТЕ С КОДОМ ИЗ ЗАДАНИЯ 3



/*
5) Напишите функцию showFamily, которая будет принимать в себя массив строк и возвращать сообщение в нужном формате.
showFamily(family)  => 'Семья состоит из: Peter Ann Alex Linda'
Имена подставляются автоматически из массива. Если массив пустой, то выводится сообщение 'Семья пуста'
*/

function showFamily(family) {
  // Проверка на наличие значений в массиве и вывод соответсвующих сообщений
  if (family.length === 0) {
      console.log('Семья пуста');
  } else {
    console.log('Семья состоит из: ' + family.join(' '));
  }
}

// Инициализация массива с именими челенов семьи
let family = ['Peter', 'Ann', 'Alex', 'Linda'];

// Вызов функции для вывода
showFamily(family);



/*
6) Задания на поиск ошибок в коде
У вас есть объект с данными о ресторане. Начинающий разработчик создал несколько функций, которые работают неправильно и он не может понять почему. 
Нужно исправить функции так, чтобы они давали всегда правильный результат. Все функции и объект написаны ниже

    6.1) Функция isOpen не хочет правильно работать. Что мы уже не пробовали подставлять в неё - результат все время неправильный. 
    Необходимо найти причины, написать причины в виде комментария и исправить их.

    6.2) Функция isAverageLunchPriceTrue должна брать цены двух любых блюд из меню, складывать их и сравнивать с средним чеком (averageLunchPrice).
        Сейчас функция работает, но постоянно выдает неправильный результат. 
        Ведь из представленного меню сумма двух любых цен всегда будет больше 20. Необходимо найти причины, написать причины в виде комментария и исправить их.
    
    6.3) Функция transferWaitors создана для того, чтобы копировать шаблон данных и передавать их в другой ресторан. 
    Конечно, в другом ресторане будут другие блюда, другие официанты и тп. Сейчас эта функция только в начале разработки и должна менять данные про официантов.
    Но в нынешнем виде мы обнаружили, что после её запуска не только копия данных содержит новых официантов, но и основные данные! В restorantData сотрудник Alice исчезает и заменяется Mike! 
    Необходимо найти причину, написать её в виде комментария и немедленно исправить, чтобы данные были разделены.
    P.S. Может показаться сложным, но задача решается очень просто, если вы помните один принцип :)


*** Усложненная задача - необязательная задача, но дающая сверху 1 балл к оценке за решение
Это одна из классических задач в программировании на формирование самых разных фигур при помощи кода.
Сейчас вам необходимо написать код, который при помощи звездочек (*) в консоли нарисует вот такую фигуру:

     *
    ***
   *****
  *******
 *********
***********

Количество звездочек можете задаватьь напрямую в коде или через дополнительную переменную - не столь важно.
(Подсказка: в конце фигуры есть перенос строки \n, который тоже учитывается в тестах. 
    В КОНЦЕ КАЖДОЙ СТРОКИ НЕТ ПРОБЕЛОВ, ТОЛЬКО ПЕРЕНОС - это будет проверяться)



*/

// Задание 6
const restorantData = {
  menu: [
    {
      name: 'Salad Caesar',
      price: '14$',
    },
    {
      name: 'Pizza Diavola',
      price: '9$',
    },
    {
      name: 'Beefsteak',
      price: '17$',
    },
    {
      name: 'Napoleon',
      price: '7$',
    },
  ],
  waitors: [
    { name: 'Alice', age: 22 },
    { name: 'John', age: 24 },
  ],
  averageLunchPrice: '20$',
  openNow: true,
}

function isOpen(prop) {
  let answer = ''
  prop ? (answer = 'Закрыто') : (answer = 'Открыто')

  //return anwser
  // 6.1) Опечатка в переменной "answer". Нужно заменить "anwser" на "answer".
  return answer
}

// console.log(isOpen(openNow))
// 6.1) Ошибка при передаче аргумента функции.
console.log(isOpen(restorantData.openNow))

function isAverageLunchPriceTrue(fDish, sDish, average) {
  //if (+fDish.price.slice(0, -1) + sDish.price < average) {
  // 6.2) Проблема в функции isAverageLunchPriceTrue: не приведены к числовому типу цены блюд. Нужно использовать parseFloat для преобразования строк в числа.
  if (parseFloat(fDish.price) + parseFloat(sDish.price) < parseFloat(average)) { 
    return 'Цена ниже средней'
  } else {
    return 'Цена выше средней'
  }
}

console.log(
  isAverageLunchPriceTrue(
    restorantData.menu[0],
    restorantData.menu[1],
    restorantData.averageLunchPrice
  )
)

function transferWaitors(data) {
  //const copy = Object.assign({}, data)
  // 6.3) При неглубоком копировании вложенные объекты являются ссылками на оригинальные, поэтому при изменении копии происходят и изменение оригинала. Для подобной задачи требуется использовать глубокое копирование.
  const copy = JSON.parse(JSON.stringify(data));
  copy.waitors[0] = { name: 'Mike', age: 32 }
  return copy
}

// Оригинальные объекты
console.log(restorantData.waitors)

// Вызов функции
const restorantDataCopy = transferWaitors(restorantData)

// Проверка оригинальных объектов после срабатывания функции
console.log(restorantData.waitors)

// Измененные объекты из копии
console.log(restorantDataCopy.waitors)



// Усложненное задание
const Pyramid = () => {
  // Высота фигуры
  const height = 5;
  // Ширина фигуры
  const width = height * 2 - 1;

  for (let i = 1; i <= height; i++) {
    // Подсчет количества звездочек в строке
    const stars = i * 2 - 1
    // Подсчет количество пробелов перед звездочками
    const spaces = (width - stars) / 2
    // Вывод строки в консоль
    console.log(' '.repeat(spaces) + '*'.repeat(stars))
    // При использовании console.log происходит автоматический перенос на новую строку, нас с Аркадием запутало условие \n
}
}

Pyramid()
